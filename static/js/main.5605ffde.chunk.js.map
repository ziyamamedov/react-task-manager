{"version":3,"sources":["context.js","components/TodoItem.js","components/TodoList.js","components/AddTodoBtn.js","components/AddTodoForm.js","App.js","index.js"],"names":["Context","React","createContext","TodoItem","todoObj","useContext","removeTodo","onComplete","className","type","onChange","bind","id","checked","completed","text","onClick","TodoList","todosArr","map","todo","index","AddTodoBtn","onAddTodo","isAddTodoActive","AddTodoForm","onSubmitTodo","onSubmit","name","App","useState","todos","setTodos","todosQuan","length","setAddTodo","toggleAddTodo","Provider","value","filter","e","preventDefault","target","addTodoInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAIeA,EAFCC,IAAMC,gB,OCgCPC,MA9Bf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACMC,qBAAWL,GAAtCM,EADqB,EACrBA,WAAYC,EADS,EACTA,WAEpB,OACE,qBAAIC,UAAU,YAAd,UACE,sBAAKA,UAAU,iBAAf,UACE,uBACEA,UAAU,sBACVC,KAAK,WACLC,SAAUH,EAAWI,KAAK,KAAMP,EAAQQ,IACxCC,QAAST,EAAQU,YAEnB,sBAAMN,UAAS,0BAAqBJ,EAAQU,UAAY,OAAS,IAAjE,SACGV,EAAQW,UAGb,wBACEP,UAAU,cACVQ,QAASV,EAAWK,KAAK,KAAMP,EAAQQ,IAFzC,wBCDSK,MAhBf,YAAiC,IAAbC,EAAY,EAAZA,SAClB,OACE,oBAAIV,UAAU,YAAd,SACGU,EAASC,KAAI,SAACC,EAAMC,GACnB,OAAO,cAAC,EAAD,CAAsBjB,QAASgB,GAAhBC,SCJf,SAASC,IAAc,IAAD,EACIjB,qBAAWL,GAA1CuB,EAD2B,EAC3BA,UAAWC,EADgB,EAChBA,gBAEnB,OACE,wBACER,QAASO,EACTf,UAAS,cAASgB,EAAkB,UAAY,aAFlD,SAIGA,EAAkB,QAAU,QCQpBC,MAhBf,WAAwB,IACdC,EAAiBrB,qBAAWL,GAA5B0B,aAER,OACE,uBAAMlB,UAAU,iBAAiBmB,SAAUD,EAA3C,UACE,oBAAIlB,UAAU,sBAAd,sBACA,sBAAKA,UAAU,oBAAf,UACE,uBAAOC,KAAK,OAAOmB,KAAK,eAAepB,UAAU,oBACjD,wBAAQC,KAAK,SAASD,UAAU,gBAAhC,wBCmEOqB,MAxEf,WAAgB,IAAD,EACaC,mBAAS,CACjC,CAAElB,GAAI,EAAGE,WAAW,EAAOC,KAAM,iEACjC,CAAEH,GAAI,EAAGE,WAAW,EAAOC,KAAM,uEACjC,CAAEH,GAAI,EAAGE,WAAW,EAAOC,KAAM,yFACjC,CAAEH,GAAI,EAAGE,WAAW,EAAOC,KAAM,yEALtB,mBACNgB,EADM,KACCC,EADD,KAQTC,EAAYF,EAAMG,OART,EAUuBJ,oBAAS,GAVhC,mBAURN,EAVQ,KAUSW,EAVT,KA2BPC,EAAgB,kBAAMD,GAAW,kBAAOX,MAY9C,OAIE,aAHA,CAGC,EAAQa,SAAT,CACEC,MAAO,CACLhC,WAvBkB,SAACM,GACvBoB,EAASD,EAAMQ,QAAO,SAACnB,GAAD,OAAUA,EAAKR,KAAOA,OAuBxCL,WAjCiB,SAACK,GACtBoB,EACED,EAAMZ,KAAI,SAACC,GAAD,OACRA,EAAKR,KAAOA,EAAZ,2BAAsBQ,GAAtB,IAA4BN,WAAYM,EAAKN,YAAcM,OA+B3DG,UAAWa,EACXZ,kBACAE,aAnBU,SAACc,GACfA,EAAEC,iBACFT,EAAS,GAAD,mBACHD,GADG,CAEN,CAAEnB,KAAMqB,EAAWnB,WAAW,EAAOC,KAAMyB,EAAEE,OAAOC,aAAaL,UAEnEF,MAOA,SASE,qBAAK5B,UAAU,MAAf,SACE,qBAAKA,UAAU,UAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,mBACA,cAACc,EAAD,OAEDE,GAAmB,cAAC,EAAD,IACF,IAAjBO,EAAMG,OACL,0CAEA,cAAC,EAAD,CAAUhB,SAAUa,cChElCa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5605ffde.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context\";\r\n\r\nfunction TodoItem({ todoObj }) {\r\n  const { removeTodo, onComplete } = useContext(Context); //Забираем переданную ф-ю из контекста\r\n\r\n  return (\r\n    <li className=\"todo-item\">\r\n      <div className=\"todo-item__col\">\r\n        <input\r\n          className=\"todo-item__checkbox\"\r\n          type=\"checkbox\"\r\n          onChange={onComplete.bind(null, todoObj.id)}\r\n          checked={todoObj.completed}\r\n        />\r\n        <span className={`todo-item__text ${todoObj.completed ? \"done\" : \"\"}`}>\r\n          {todoObj.text}\r\n        </span>\r\n      </div>\r\n      <button\r\n        className=\"btn_red btn\"\r\n        onClick={removeTodo.bind(null, todoObj.id)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todoObj: PropTypes.object,\r\n};\r\n\r\nexport default TodoItem;\r\n","import TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction TodoList({ todosArr }) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {todosArr.map((todo, index) => {\r\n        return <TodoItem key={index} todoObj={todo} />;\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todosArr: PropTypes.arrayOf(PropTypes.object),\r\n  onComplete: PropTypes.func,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default TodoList;\r\n","import { useContext } from \"react\";\r\nimport Context from \"../context\";\r\n\r\nexport default function AddTodoBtn() {\r\n  const { onAddTodo, isAddTodoActive } = useContext(Context);\r\n\r\n  return (\r\n    <button\r\n      onClick={onAddTodo}\r\n      className={`btn ${isAddTodoActive ? \"btn_red\" : \"btn_green\"}`}\r\n    >\r\n      {isAddTodoActive ? \"Close\" : \"Add\"}\r\n    </button>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport Context from \"../context\";\r\n\r\nfunction AddTodoForm() {\r\n  const { onSubmitTodo } = useContext(Context);\r\n\r\n  return (\r\n    <form className=\"add-todo__form\" onSubmit={onSubmitTodo}>\r\n      <h4 className=\"add-todo-form-title\">Add task</h4>\r\n      <div className=\"add-todo-form-row\">\r\n        <input type=\"text\" name=\"addTodoInput\" className=\"add-todo__input\" />\r\n        <button type=\"submit\" className=\"btn btn_green\">\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTodoForm;\r\n","import { useState } from \"react\";\nimport TodoList from \"./components/TodoList\";\nimport Context from \"./context\";\nimport AddTodoBtn from \"./components/AddTodoBtn\";\nimport AddTodoForm from \"./components/AddTodoForm\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { id: 1, completed: false, text: \"Купить хлеб\" },\n    { id: 2, completed: false, text: \"Купить масло\" },\n    { id: 3, completed: false, text: \"Поменять колеса\" },\n    { id: 4, completed: false, text: \"Сделать дело\" },\n  ]);\n\n  let todosQuan = todos.length;\n\n  let [isAddTodoActive, setAddTodo] = useState(false);\n\n  //This function will launch when the checkbox changed\n  const toggleComplete = (id) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  //Delete todo from the ui\n  const deleteComponent = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  //Opens and closes Add-Todo Form\n  const toggleAddTodo = () => setAddTodo(() => !isAddTodoActive);\n\n  //Adds new todo to the list\n  const addTodo = (e) => {\n    e.preventDefault();\n    setTodos([\n      ...todos,\n      { id: ++todosQuan, completed: false, text: e.target.addTodoInput.value },\n    ]);\n    toggleAddTodo();\n  };\n\n  return (\n    /** Оборачиваем наш компонент в Context.Provider для использования контекста,\n     * это нужно для того чтобы вызывать нужную ф-ю прямо из компонента, а не передавать\n     * ее через props*/\n    <Context.Provider\n      value={{\n        removeTodo: deleteComponent,\n        onComplete: toggleComplete,\n        onAddTodo: toggleAddTodo,\n        isAddTodoActive,\n        onSubmitTodo: addTodo,\n      }}\n    >\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <div className=\"container\">\n            <div className=\"todos__header\">\n              <h2 className=\"todos-title\">Tasks</h2>\n              <AddTodoBtn />\n            </div>\n            {isAddTodoActive && <AddTodoForm />}\n            {todos.length === 0 ? (\n              <h3>No todos</h3>\n            ) : (\n              <TodoList todosArr={todos} />\n            )}\n          </div>\n        </div>\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}